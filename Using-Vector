#include <iostream>
#include <vector>

using namespace std;

// ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ Safe ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ
bool isSystemSafe(const vector<vector<int>>& maxDemand,     // ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ
                  const vector<vector<int>>& currentAllocation, // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶¨‡¶∞‡¶æ‡¶¶‡ßç‡¶¶
                  const vector<int>& availableResources,  // ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶´‡ßç‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏
                  int totalProcesses,  // ‡¶Æ‡ßã‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
                  int totalResourceTypes) { // ‡¶Æ‡ßã‡¶ü ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®

    // Need ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ (Maximum demand - current allocation)
    vector<vector<int>> remainingNeed(totalProcesses, vector<int>(totalResourceTypes));
    vector<bool> isProcessFinished(totalProcesses, false); // ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ‡¶ì ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    vector<int> work = availableResources;  // ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
    vector<int> safeSequence;  // ‡¶∏‡ßá‡¶´ ‡¶∏‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá

    // Need ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡¶æ (Maximum - Allocation)
    for (int i = 0; i < totalProcesses; ++i)
        for (int j = 0; j < totalResourceTypes; ++j)
            remainingNeed[i][j] = maxDemand[i][j] - currentAllocation[i][j];

    int completedProcesses = 0;

    // ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶®‡¶æ ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü, ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    while (completedProcesses < totalProcesses) {
        bool foundSafeProcess = false;

        // ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        for (int i = 0; i < totalProcesses; ++i) {
            if (!isProcessFinished[i]) {  // ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ ‡¶π‡ßü‡ßá ‡¶•‡¶æ‡¶ï‡ßá

                bool canAllocate = true;  // ‡¶è‡¶ü‡¶æ ‡¶ß‡¶∞‡¶õ‡¶ø ‡¶Ø‡ßá ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ allocation ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá

                // ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡¶ø, ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ü‡¶ø allocation ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ
                for (int j = 0; j < totalResourceTypes; ++j) {
                    if (remainingNeed[i][j] > work[j]) {  // ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶´‡ßç‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡ßü
                        canAllocate = false;  // ‡¶§‡¶æ‡¶π‡¶≤‡ßá allocation ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü
                        break;
                    }
                }

                // ‡¶Ø‡¶¶‡¶ø allocation ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá
                if (canAllocate) {
                    // ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
                    for (int j = 0; j < totalResourceTypes; ++j)
                        work[j] += currentAllocation[i][j];

                    safeSequence.push_back(i);  // ‡¶∏‡ßá‡¶´ ‡¶∏‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
                    isProcessFinished[i] = true;  // ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶¨‡¶≤‡ßá ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
                    foundSafeProcess = true;  // ‡¶∏‡ßá‡¶´ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
                    ++completedProcesses;  // ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø
                }
            }
        }

        // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡ßá‡¶´ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ Unsafe (Deadlock ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá)
        if (!foundSafeProcess) {
            cout << "‚ùå ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶è‡¶ñ‡¶® Safe ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡ßü ‡¶®‡ßá‡¶á! Deadlock ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§" << endl;
            return false;
        }
    }

    // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ Safe (‡¶§‡¶¨‡ßá Safe Sequence ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá)
    cout << "‚úÖ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ Safe ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡ßü ‡¶Ü‡¶õ‡ßá‡•§" << endl;
    cout << "üëâ Safe Execution Sequence: ";
    for (int p : safeSequence)
        cout << "P" << p << " ";  // Safe Execution Order ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
    cout << endl;

    return true;
}

int main() {
    int totalProcesses = 5;  // ‡¶Æ‡ßã‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
    int totalResourceTypes = 3;  // ‡¶Æ‡ßã‡¶ü ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ

    // Allocation Matrix (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶¨‡¶∞‡¶æ‡¶¶‡ßç‡¶¶)
    vector<vector<int>> currentAllocation = {
        {0, 1, 0},  // P0
        {2, 0, 0},  // P1
        {3, 0, 2},  // P2
        {2, 1, 1},  // P3
        {0, 0, 2}   // P4
    };

    // Max Demand Matrix (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ)
    vector<vector<int>> maxDemand = {
        {7, 5, 3},  // P0
        {3, 2, 2},  // P1
        {9, 0, 2},  // P2
        {2, 2, 2},  // P3
        {4, 3, 3}   // P4
    };

    // Available Resources (‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶´‡ßç‡¶∞‡¶ø ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏)
    vector<int> availableResources = {3, 3, 2};  // {A1, A2, A3}

    // Safe check ‡¶ï‡¶≤
    isSystemSafe(maxDemand, currentAllocation, availableResources, totalProcesses, totalResourceTypes);

    return 0;
}
